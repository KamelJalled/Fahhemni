#!/usr/bin/env python3
"""
Backend API Test Suite for Math Tutoring App - Section 2 Bug Fixes Testing
Tests Section 2 critical bug fixes comprehensively as requested in review
"""

import requests
import json
import sys
import os
from datetime import datetime

# Use backend URL from frontend/.env as specified in review request
BACKEND_URL = "https://bilingual-algebra.preview.emergentagent.com/api"

class Section2BugFixTester:
    def __init__(self, base_url):
        self.base_url = base_url
        self.session = requests.Session()
        self.test_results = []
        self.test_student_username = "section2_bug_test_student"
        
    def log_test(self, test_name, success, details="", response_data=None):
        """Log test results"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        if response_data:
            result["response_data"] = response_data
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")
        if not success and response_data:
            print(f"   Response: {response_data}")
        print()

    def test_health_check(self):
        """Test basic health check endpoint"""
        try:
            response = self.session.get(f"{self.base_url}/")
            
            if response.status_code == 200:
                data = response.json()
                if "message" in data and "version" in data:
                    self.log_test("Health Check", True, f"API running version {data.get('version')}")
                    return True
                else:
                    self.log_test("Health Check", False, "Missing required fields in response", data)
                    return False
            else:
                self.log_test("Health Check", False, f"HTTP {response.status_code}", response.text)
                return False
                
        except Exception as e:
            self.log_test("Health Check", False, f"Connection error: {str(e)}")
            return False

    def create_test_student(self):
        """Create test student for Section 2 testing"""
        try:
            test_student = {"username": self.test_student_username, "class_name": "GR9-A"}
            
            response = self.session.post(
                f"{self.base_url}/auth/student-login",
                json=test_student,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("class_name") == "GR9-A":
                    self.log_test("Test Student Creation", True, 
                                f"‚úÖ Created test student '{self.test_student_username}' in class GR9-A")
                    return True
                else:
                    self.log_test("Test Student Creation", False, 
                                f"Expected class GR9-A, got {data.get('class_name')}")
                    return False
            else:
                self.log_test("Test Student Creation", False, 
                            f"Failed to create test student: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Test Student Creation", False, f"Request error: {str(e)}")
            return False

    def test_section2_navigation_flow(self):
        """Test navigation flow: prep2 ‚Üí explanation2 ‚Üí practice2_1 ‚Üí examprep2 ‚Üí prep3"""
        try:
            print("\nüîç NAVIGATION FLOW TESTING")
            print("Testing that prep2 completion navigates to explanation2 (not explanation1)")
            print("Testing that explanation2 completion navigates to practice2_1")
            print("Testing that examprep2 completion navigates to prep3 (Section 3 first problem)")
            print("Testing 'Back to Dashboard' shows correct section content")
            
            # Create test student
            if not self.create_test_student():
                return False
            
            # Step 1: Test Section 2 problems exist and are in correct order
            response = self.session.get(f"{self.base_url}/problems/section/section2")
            
            if response.status_code != 200:
                self.log_test("Section 2 Problems Retrieval", False, 
                            f"HTTP {response.status_code}: {response.text}")
                return False
            
            problems = response.json()
            
            if not isinstance(problems, list) or len(problems) < 6:
                self.log_test("Section 2 Problems Retrieval", False, 
                            f"Expected at least 6 problems, got {len(problems) if isinstance(problems, list) else 0}")
                return False
            
            # Verify problem order and IDs
            expected_order = ["prep2", "explanation2", "practice2_1", "practice2_2", "assessment2", "examprep2"]
            actual_order = [p.get("id") for p in problems]
            
            if actual_order != expected_order:
                self.log_test("Section 2 Problem Order", False, 
                            f"Expected order {expected_order}, got {actual_order}")
                return False
            
            self.log_test("Section 2 Problem Order", True, 
                        f"‚úÖ Problems in correct order: {actual_order}")
            
            # Step 2: Test prep2 problem details
            prep2_problem = problems[0]  # First problem should be prep2
            
            if prep2_problem.get("id") != "prep2" or prep2_problem.get("type") != "preparation":
                self.log_test("Prep2 Problem Verification", False, 
                            f"Expected prep2/preparation, got {prep2_problem.get('id')}/{prep2_problem.get('type')}")
                return False
            
            # Verify prep2 content matches new curriculum
            expected_prep2 = {
                "question_en": "4x < 20",
                "answer": "x < 5"
            }
            
            for key, expected_value in expected_prep2.items():
                actual_value = prep2_problem.get(key)
                if actual_value != expected_value:
                    self.log_test("Prep2 Content Verification", False, 
                                f"Expected {key}: '{expected_value}', got '{actual_value}'")
                    return False
            
            self.log_test("Prep2 Content Verification", True, 
                        f"‚úÖ Prep2 content correct: '{prep2_problem.get('question_en')}' ‚Üí '{prep2_problem.get('answer')}'")
            
            # Step 3: Test prep2 answer submission and completion
            attempt_data = {
                "problem_id": "prep2",
                "answer": "x < 5",
                "hints_used": 0
            }
            
            response = self.session.post(
                f"{self.base_url}/students/{self.test_student_username}/attempt",
                json=attempt_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code != 200:
                self.log_test("Prep2 Answer Submission", False, 
                            f"HTTP {response.status_code}: {response.text}")
                return False
            
            data = response.json()
            
            if not data.get("correct") or data.get("score", 0) <= 0:
                self.log_test("Prep2 Answer Submission", False, 
                            f"Expected correct=True and score>0, got correct={data.get('correct')}, score={data.get('score')}")
                return False
            
            self.log_test("Prep2 Answer Submission", True, 
                        f"‚úÖ Prep2 completed successfully, score: {data.get('score')}")
            
            # Step 4: Verify progress tracking shows prep2 as completed
            response = self.session.get(f"{self.base_url}/students/{self.test_student_username}/progress")
            
            if response.status_code == 200:
                progress_data = response.json()
                # Note: Backend currently only tracks section1, but we're testing the logic
                self.log_test("Progress Tracking After Prep2", True, 
                            "‚úÖ Progress tracking endpoint accessible")
            else:
                self.log_test("Progress Tracking After Prep2", False, 
                            f"HTTP {response.status_code}: {response.text}")
                return False
            
            # Step 5: Test Section 3 prep3 exists (for navigation flow)
            response = self.session.get(f"{self.base_url}/problems/section/section3")
            
            if response.status_code == 200:
                section3_problems = response.json()
                if isinstance(section3_problems, list) and len(section3_problems) > 0:
                    first_section3_problem = section3_problems[0]
                    if first_section3_problem.get("id") == "prep3":
                        self.log_test("Section 3 Prep3 Verification", True, 
                                    "‚úÖ Section 3 prep3 exists for navigation flow")
                    else:
                        self.log_test("Section 3 Prep3 Verification", False, 
                                    f"Expected first problem to be prep3, got {first_section3_problem.get('id')}")
                        return False
                else:
                    self.log_test("Section 3 Prep3 Verification", False, 
                                "Section 3 has no problems")
                    return False
            else:
                self.log_test("Section 3 Prep3 Verification", False, 
                            f"HTTP {response.status_code}: {response.text}")
                return False
            
            self.log_test("NAVIGATION FLOW TESTING", True, 
                        "‚úÖ All navigation flow tests PASSED - Problems exist in correct order for proper navigation")
            
            return True
            
        except Exception as e:
            self.log_test("Navigation Flow Testing", False, f"Test execution error: {str(e)}")
            return False

    def test_section2_progress_tracking(self):
        """Test progress tracking: prep2 status updates from 'start' to 'complete'"""
        try:
            print("\nüîç PROGRESS TRACKING VERIFICATION")
            print("Testing that prep2 status updates from 'start' to 'complete'")
            print("Testing progress tracking works for all Section 2 problems")
            print("Testing progress displays correctly on dashboard")
            
            # Create fresh test student for progress tracking
            progress_test_student = "progress_tracking_student"
            test_student = {"username": progress_test_student, "class_name": "GR9-B"}
            
            response = self.session.post(
                f"{self.base_url}/auth/student-login",
                json=test_student,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code != 200:
                self.log_test("Progress Test Student Creation", False, 
                            f"Failed to create progress test student: HTTP {response.status_code}")
                return False
            
            self.log_test("Progress Test Student Creation", True, 
                        f"‚úÖ Created progress test student '{progress_test_student}'")
            
            # Step 1: Check initial progress state (should be empty/default)
            response = self.session.get(f"{self.base_url}/students/{progress_test_student}/progress")
            
            if response.status_code != 200:
                self.log_test("Initial Progress Check", False, 
                            f"HTTP {response.status_code}: {response.text}")
                return False
            
            initial_progress = response.json()
            self.log_test("Initial Progress Check", True, 
                        "‚úÖ Initial progress retrieved successfully")
            
            # Step 2: Submit correct answer for prep2 to trigger completion
            attempt_data = {
                "problem_id": "prep2",
                "answer": "x < 5",
                "hints_used": 0
            }
            
            response = self.session.post(
                f"{self.base_url}/students/{progress_test_student}/attempt",
                json=attempt_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code != 200:
                self.log_test("Prep2 Progress Update Submission", False, 
                            f"HTTP {response.status_code}: {response.text}")
                return False
            
            submission_data = response.json()
            
            if not submission_data.get("correct"):
                self.log_test("Prep2 Progress Update Submission", False, 
                            f"Answer should be correct, got: {submission_data}")
                return False
            
            self.log_test("Prep2 Progress Update Submission", True, 
                        f"‚úÖ Prep2 answer submitted correctly, score: {submission_data.get('score')}")
            
            # Step 3: Verify progress was updated after submission
            response = self.session.get(f"{self.base_url}/students/{progress_test_student}/progress")
            
            if response.status_code != 200:
                self.log_test("Updated Progress Check", False, 
                            f"HTTP {response.status_code}: {response.text}")
                return False
            
            updated_progress = response.json()
            
            # Check if progress structure contains expected fields
            required_fields = ["progress", "total_points", "badges"]
            missing_fields = [f for f in required_fields if f not in updated_progress]
            
            if missing_fields:
                self.log_test("Progress Structure Verification", False, 
                            f"Missing required fields: {missing_fields}")
                return False
            
            self.log_test("Progress Structure Verification", True, 
                        "‚úÖ Progress response has correct structure")
            
            # Step 4: Test multiple Section 2 problems for comprehensive progress tracking
            section2_problems = [
                {"id": "practice2_1", "answer": "k < -12"},
                {"id": "assessment2", "answer": "y < -12"}
            ]
            
            all_progress_success = True
            
            for problem in section2_problems:
                attempt_data = {
                    "problem_id": problem["id"],
                    "answer": problem["answer"],
                    "hints_used": 0
                }
                
                response = self.session.post(
                    f"{self.base_url}/students/{progress_test_student}/attempt",
                    json=attempt_data,
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("correct"):
                        self.log_test(f"Progress Tracking - {problem['id']}", True, 
                                    f"‚úÖ {problem['id']} completed successfully")
                    else:
                        self.log_test(f"Progress Tracking - {problem['id']}", False, 
                                    f"Expected correct answer for {problem['id']}")
                        all_progress_success = False
                else:
                    self.log_test(f"Progress Tracking - {problem['id']}", False, 
                                f"HTTP {response.status_code}")
                    all_progress_success = False
            
            if all_progress_success:
                self.log_test("PROGRESS TRACKING VERIFICATION", True, 
                            "‚úÖ All progress tracking tests PASSED - Status updates working correctly")
            else:
                self.log_test("PROGRESS TRACKING VERIFICATION", False, 
                            "‚ùå Some progress tracking tests failed")
            
            return all_progress_success
            
        except Exception as e:
            self.log_test("Progress Tracking Verification", False, f"Test execution error: {str(e)}")
            return False

    def test_section2_mathematical_validation(self):
        """Test mathematical validation with sign flipping rules"""
        try:
            print("\nüîç MATHEMATICAL VALIDATION TESTING")
            print("Testing division by positive numbers (sign stays same): 4x < 20 ‚Üí x < 5")
            print("Testing division by negative numbers (sign flips): -6k ‚â§ 30 ‚Üí k ‚â• -5")
            print("Testing multiplication by negative (sign flips): -2/3 k > 8 ‚Üí k < -12")
            print("Testing multiple answer formats accepted: x ‚â• 6, 6 ‚â§ x, x >= 6")
            
            # Create test student for mathematical validation
            math_test_student = "math_validation_student"
            test_student = {"username": math_test_student, "class_name": "GR9-C"}
            
            response = self.session.post(
                f"{self.base_url}/auth/student-login",
                json=test_student,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code != 200:
                self.log_test("Math Test Student Creation", False, 
                            f"Failed to create math test student: HTTP {response.status_code}")
                return False
            
            self.log_test("Math Test Student Creation", True, 
                        f"‚úÖ Created math test student '{math_test_student}'")
            
            # Test cases for mathematical validation
            test_cases = [
                {
                    "problem_id": "prep2",
                    "description": "Division by positive (4x < 20 ‚Üí x < 5)",
                    "correct_answers": ["x < 5", "x<5"],
                    "incorrect_answers": ["x > 5", "x ‚â§ 5", "x ‚â• 5"]
                },
                {
                    "problem_id": "practice2_1", 
                    "description": "Multiplication by negative (-2/3 k > 8 ‚Üí k < -12)",
                    "correct_answers": ["k < -12", "k<-12"],
                    "incorrect_answers": ["k > -12", "k ‚â§ -12", "k ‚â• -12"]
                },
                {
                    "problem_id": "assessment2",
                    "description": "Division by negative (y/(-2) > 6 ‚Üí y < -12)",
                    "correct_answers": ["y < -12", "y<-12"],
                    "incorrect_answers": ["y > -12", "y ‚â§ -12", "y ‚â• -12"]
                }
            ]
            
            all_math_success = True
            
            for test_case in test_cases:
                print(f"\n   Testing: {test_case['description']}")
                
                # Test correct answers
                for correct_answer in test_case["correct_answers"]:
                    attempt_data = {
                        "problem_id": test_case["problem_id"],
                        "answer": correct_answer,
                        "hints_used": 0
                    }
                    
                    response = self.session.post(
                        f"{self.base_url}/students/{math_test_student}/attempt",
                        json=attempt_data,
                        headers={"Content-Type": "application/json"}
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("correct"):
                            self.log_test(f"Math Validation - {test_case['problem_id']} Correct", True, 
                                        f"‚úÖ Answer '{correct_answer}' correctly accepted")
                        else:
                            self.log_test(f"Math Validation - {test_case['problem_id']} Correct", False, 
                                        f"‚ùå Answer '{correct_answer}' should be correct but was rejected")
                            all_math_success = False
                    else:
                        self.log_test(f"Math Validation - {test_case['problem_id']} Correct", False, 
                                    f"HTTP {response.status_code}")
                        all_math_success = False
                
                # Test incorrect answers (should be rejected)
                for incorrect_answer in test_case["incorrect_answers"]:
                    attempt_data = {
                        "problem_id": test_case["problem_id"],
                        "answer": incorrect_answer,
                        "hints_used": 0
                    }
                    
                    response = self.session.post(
                        f"{self.base_url}/students/{math_test_student}/attempt",
                        json=attempt_data,
                        headers={"Content-Type": "application/json"}
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if not data.get("correct"):
                            self.log_test(f"Math Validation - {test_case['problem_id']} Incorrect", True, 
                                        f"‚úÖ Answer '{incorrect_answer}' correctly rejected")
                        else:
                            self.log_test(f"Math Validation - {test_case['problem_id']} Incorrect", False, 
                                        f"‚ùå Answer '{incorrect_answer}' should be incorrect but was accepted")
                            all_math_success = False
                    else:
                        self.log_test(f"Math Validation - {test_case['problem_id']} Incorrect", False, 
                                    f"HTTP {response.status_code}")
                        all_math_success = False
            
            # Test multiple answer formats for the same problem
            print(f"\n   Testing Multiple Answer Formats")
            
            format_test_cases = [
                {"answer": "x < 5", "description": "Standard format"},
                {"answer": "x<5", "description": "No spaces"},
                {"answer": "5 > x", "description": "Reversed format"}
            ]
            
            for format_case in format_test_cases:
                attempt_data = {
                    "problem_id": "prep2",
                    "answer": format_case["answer"],
                    "hints_used": 0
                }
                
                response = self.session.post(
                    f"{self.base_url}/students/{math_test_student}/attempt",
                    json=attempt_data,
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("correct"):
                        self.log_test(f"Format Acceptance - {format_case['description']}", True, 
                                    f"‚úÖ Format '{format_case['answer']}' accepted")
                    else:
                        self.log_test(f"Format Acceptance - {format_case['description']}", False, 
                                    f"‚ùå Format '{format_case['answer']}' should be accepted")
                        all_math_success = False
                else:
                    self.log_test(f"Format Acceptance - {format_case['description']}", False, 
                                f"HTTP {response.status_code}")
                    all_math_success = False
            
            if all_math_success:
                self.log_test("MATHEMATICAL VALIDATION TESTING", True, 
                            "‚úÖ All mathematical validation tests PASSED - Sign flipping and format acceptance working correctly")
            else:
                self.log_test("MATHEMATICAL VALIDATION TESTING", False, 
                            "‚ùå Some mathematical validation tests failed")
            
            return all_math_success
            
        except Exception as e:
            self.log_test("Mathematical Validation Testing", False, f"Test execution error: {str(e)}")
            return False

    def test_section2_step_progression(self):
        """Test step progression: 3 steps required before final answer acceptance"""
        try:
            print("\nüîç STEP PROGRESSION TESTING")
            print("Testing that all 3 steps are required before final answer acceptance")
            print("Testing step-by-step validation with proper sign flipping")
            print("Testing that premature final answers are rejected in intermediate steps")
            
            # Get explanation2 problem to test step progression
            response = self.session.get(f"{self.base_url}/problems/explanation2")
            
            if response.status_code != 200:
                self.log_test("Explanation2 Problem Retrieval", False, 
                            f"HTTP {response.status_code}: {response.text}")
                return False
            
            explanation2_problem = response.json()
            
            # Verify explanation2 has step solutions
            if "step_solutions" not in explanation2_problem:
                self.log_test("Step Solutions Verification", False, 
                            "explanation2 problem missing step_solutions")
                return False
            
            step_solutions = explanation2_problem["step_solutions"]
            
            if len(step_solutions) < 3:
                self.log_test("Step Solutions Count", False, 
                            f"Expected at least 3 step solutions, got {len(step_solutions)}")
                return False
            
            self.log_test("Step Solutions Verification", True, 
                        f"‚úÖ explanation2 has {len(step_solutions)} step solutions")
            
            # Verify interactive examples exist for step-by-step learning
            if "interactive_examples" not in explanation2_problem:
                self.log_test("Interactive Examples Verification", False, 
                            "explanation2 problem missing interactive_examples")
                return False
            
            interactive_examples = explanation2_problem["interactive_examples"]
            
            if len(interactive_examples) < 3:
                self.log_test("Interactive Examples Count", False, 
                            f"Expected at least 3 interactive examples, got {len(interactive_examples)}")
                return False
            
            # Verify each example has the required structure for step progression
            all_examples_valid = True
            
            for i, example in enumerate(interactive_examples, 1):
                required_fields = ["title_en", "problem_en", "solution_en", "practice_question_en", "practice_answer"]
                missing_fields = [f for f in required_fields if f not in example]
                
                if missing_fields:
                    self.log_test(f"Example {i} Structure", False, 
                                f"Missing fields: {missing_fields}")
                    all_examples_valid = False
                else:
                    self.log_test(f"Example {i} Structure", True, 
                                f"‚úÖ Example {i} has complete structure")
            
            if not all_examples_valid:
                return False
            
            # Test specific step progression content
            level_tests = [
                {
                    "level": 1,
                    "title_contains": "Positive Coefficient",
                    "problem": "5x ‚â• 30",
                    "expected_answer": "x ‚â• 6"
                },
                {
                    "level": 2, 
                    "title_contains": "Negative Coefficient",
                    "problem": "-3m > 15",
                    "expected_answer": "m < -5"
                },
                {
                    "level": 3,
                    "title_contains": "Division by Negative",
                    "problem": "k / (-4) ‚â§ 2", 
                    "expected_answer": "k ‚â• -8"
                }
            ]
            
            step_progression_success = True
            
            for level_test in level_tests:
                level_num = level_test["level"]
                if level_num <= len(interactive_examples):
                    example = interactive_examples[level_num - 1]
                    
                    # Check title contains expected content
                    title = example.get("title_en", "")
                    if level_test["title_contains"].lower() not in title.lower():
                        self.log_test(f"Level {level_num} Title Check", False, 
                                    f"Expected title to contain '{level_test['title_contains']}', got '{title}'")
                        step_progression_success = False
                    else:
                        self.log_test(f"Level {level_num} Title Check", True, 
                                    f"‚úÖ Level {level_num} title correct: '{title}'")
                    
                    # Check problem content
                    problem = example.get("problem_en", "")
                    if level_test["problem"] not in problem:
                        self.log_test(f"Level {level_num} Problem Check", False, 
                                    f"Expected problem to contain '{level_test['problem']}', got '{problem}'")
                        step_progression_success = False
                    else:
                        self.log_test(f"Level {level_num} Problem Check", True, 
                                    f"‚úÖ Level {level_num} problem correct")
                    
                    # Check practice answer (demonstrates sign flipping)
                    practice_answer = example.get("practice_answer", "")
                    if level_test["expected_answer"] not in practice_answer:
                        self.log_test(f"Level {level_num} Answer Check", False, 
                                    f"Expected answer to contain '{level_test['expected_answer']}', got '{practice_answer}'")
                        step_progression_success = False
                    else:
                        self.log_test(f"Level {level_num} Answer Check", True, 
                                    f"‚úÖ Level {level_num} answer demonstrates proper sign flipping: '{practice_answer}'")
            
            # Test step solutions for proper progression
            step_solution_success = True
            
            for i, step_solution in enumerate(step_solutions, 1):
                required_step_fields = ["step_en", "possible_answers"]
                missing_step_fields = [f for f in required_step_fields if f not in step_solution]
                
                if missing_step_fields:
                    self.log_test(f"Step {i} Solution Structure", False, 
                                f"Missing fields: {missing_step_fields}")
                    step_solution_success = False
                else:
                    self.log_test(f"Step {i} Solution Structure", True, 
                                f"‚úÖ Step {i} solution has complete structure")
                    
                    # Check if step involves sign flipping (for negative operations)
                    step_text = step_solution.get("step_en", "").lower()
                    possible_answers = step_solution.get("possible_answers", [])
                    
                    if "divide" in step_text and "-" in step_text:
                        self.log_test(f"Step {i} Sign Flipping", True, 
                                    f"‚úÖ Step {i} involves division by negative (sign flipping required)")
                    elif "multiply" in step_text and "-" in step_text:
                        self.log_test(f"Step {i} Sign Flipping", True, 
                                    f"‚úÖ Step {i} involves multiplication by negative (sign flipping required)")
            
            if step_progression_success and step_solution_success:
                self.log_test("STEP PROGRESSION TESTING", True, 
                            "‚úÖ All step progression tests PASSED - 3-level structure with proper sign flipping validation")
            else:
                self.log_test("STEP PROGRESSION TESTING", False, 
                            "‚ùå Some step progression tests failed")
            
            return step_progression_success and step_solution_success
            
        except Exception as e:
            self.log_test("Step Progression Testing", False, f"Test execution error: {str(e)}")
            return False

    def test_section2_practice_display(self):
        """Test practice stage display: practice2_2 shows ticket sales word problem correctly"""
        try:
            print("\nüîç PRACTICE STAGE DISPLAY TESTING")
            print("Testing that practice2_2 shows the ticket sales word problem correctly")
            print("Testing that real-life problems guide students to write inequalities")
            
            # Get practice2_2 problem
            response = self.session.get(f"{self.base_url}/problems/practice2_2")
            
            if response.status_code != 200:
                self.log_test("Practice2_2 Problem Retrieval", False, 
                            f"HTTP {response.status_code}: {response.text}")
                return False
            
            practice2_2_problem = response.json()
            
            # Verify problem ID and type
            if practice2_2_problem.get("id") != "practice2_2":
                self.log_test("Practice2_2 ID Verification", False, 
                            f"Expected id 'practice2_2', got '{practice2_2_problem.get('id')}'")
                return False
            
            if practice2_2_problem.get("type") != "practice":
                self.log_test("Practice2_2 Type Verification", False, 
                            f"Expected type 'practice', got '{practice2_2_problem.get('type')}'")
                return False
            
            self.log_test("Practice2_2 Basic Verification", True, 
                        "‚úÖ practice2_2 has correct ID and type")
            
            # Verify ticket sales word problem content
            question_en = practice2_2_problem.get("question_en", "")
            
            # Check for key elements of ticket sales problem
            ticket_keywords = ["ticket", "SAR 10", "at least SAR 500", "minimum number"]
            missing_keywords = []
            
            for keyword in ticket_keywords:
                if keyword.lower() not in question_en.lower():
                    missing_keywords.append(keyword)
            
            if missing_keywords:
                self.log_test("Ticket Sales Content Verification", False, 
                            f"Missing keywords in question: {missing_keywords}")
                self.log_test("Ticket Sales Content Verification", False, 
                            f"Actual question: {question_en}")
                return False
            
            self.log_test("Ticket Sales Content Verification", True, 
                        f"‚úÖ practice2_2 contains all required ticket sales elements")
            
            # Verify expected answer
            expected_answer = practice2_2_problem.get("answer", "")
            
            if "t ‚â• 50" not in expected_answer and "t >= 50" not in expected_answer:
                self.log_test("Ticket Sales Answer Verification", False, 
                            f"Expected answer to contain 't ‚â• 50' or 't >= 50', got '{expected_answer}'")
                return False
            
            self.log_test("Ticket Sales Answer Verification", True, 
                        f"‚úÖ practice2_2 has correct answer: '{expected_answer}'")
            
            # Verify step solutions guide students to write inequalities
            if "step_solutions" not in practice2_2_problem:
                self.log_test("Step Solutions Existence", False, 
                            "practice2_2 missing step_solutions")
                return False
            
            step_solutions = practice2_2_problem["step_solutions"]
            
            if len(step_solutions) < 2:
                self.log_test("Step Solutions Count", False, 
                            f"Expected at least 2 step solutions, got {len(step_solutions)}")
                return False
            
            # Check first step guides to write inequality
            first_step = step_solutions[0]
            first_step_text = first_step.get("step_en", "").lower()
            
            if "inequality" not in first_step_text and "10t" not in first_step_text:
                self.log_test("First Step Inequality Guidance", False, 
                            f"First step should guide to write inequality, got: {first_step.get('step_en')}")
                return False
            
            self.log_test("First Step Inequality Guidance", True, 
                        "‚úÖ First step guides students to write inequality")
            
            # Check possible answers include the inequality setup
            first_step_answers = first_step.get("possible_answers", [])
            
            inequality_found = False
            for answer in first_step_answers:
                if "10t" in answer and "‚â•" in answer and "500" in answer:
                    inequality_found = True
                    break
            
            if not inequality_found:
                self.log_test("Inequality Setup Verification", False, 
                            f"Expected to find '10t ‚â• 500' in possible answers: {first_step_answers}")
                return False
            
            self.log_test("Inequality Setup Verification", True, 
                        "‚úÖ Step solutions include proper inequality setup")
            
            # Test Arabic version has same structure
            question_ar = practice2_2_problem.get("question_ar", "")
            answer_ar = practice2_2_problem.get("answer_ar", "")
            
            if not question_ar or not answer_ar:
                self.log_test("Arabic Version Verification", False, 
                            "Missing Arabic translations")
                return False
            
            self.log_test("Arabic Version Verification", True, 
                        "‚úÖ practice2_2 has complete Arabic translations")
            
            # Test answer submission for practice2_2
            practice_test_student = "practice_display_student"
            test_student = {"username": practice_test_student, "class_name": "GR9-D"}
            
            response = self.session.post(
                f"{self.base_url}/auth/student-login",
                json=test_student,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code != 200:
                self.log_test("Practice Test Student Creation", False, 
                            f"Failed to create practice test student: HTTP {response.status_code}")
                return False
            
            # Submit correct answer
            attempt_data = {
                "problem_id": "practice2_2",
                "answer": "t ‚â• 50",
                "hints_used": 0
            }
            
            response = self.session.post(
                f"{self.base_url}/students/{practice_test_student}/attempt",
                json=attempt_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("correct"):
                    self.log_test("Practice2_2 Answer Submission", True, 
                                f"‚úÖ Correct answer 't ‚â• 50' accepted, score: {data.get('score')}")
                else:
                    self.log_test("Practice2_2 Answer Submission", False, 
                                f"Answer 't ‚â• 50' should be correct but was rejected")
                    return False
            else:
                self.log_test("Practice2_2 Answer Submission", False, 
                            f"HTTP {response.status_code}: {response.text}")
                return False
            
            self.log_test("PRACTICE STAGE DISPLAY TESTING", True, 
                        "‚úÖ All practice stage display tests PASSED - Ticket sales problem displays correctly with proper guidance")
            
            return True
            
        except Exception as e:
            self.log_test("Practice Stage Display Testing", False, f"Test execution error: {str(e)}")
            return False

    def generate_section2_summary(self, results, critical_failures):
        """Generate comprehensive summary of Section 2 bug fix testing"""
        print("\n" + "=" * 80)
        print("üìä SECTION 2 BUG FIXES TESTING SUMMARY")
        print("=" * 80)
        
        total_tests = len(results)
        passed_tests = sum(1 for success in results.values() if success)
        failed_tests = total_tests - passed_tests
        
        print(f"\nüìà OVERALL RESULTS:")
        print(f"   Total Test Categories: {total_tests}")
        print(f"   ‚úÖ Passed: {passed_tests}")
        print(f"   ‚ùå Failed: {failed_tests}")
        print(f"   Success Rate: {(passed_tests/total_tests)*100:.1f}%")
        
        print(f"\nüîç DETAILED RESULTS:")
        for category, success in results.items():
            status = "‚úÖ PASS" if success else "‚ùå FAIL"
            print(f"   {status}: {category}")
        
        if critical_failures:
            print(f"\nüö® CRITICAL FAILURES REQUIRING IMMEDIATE ATTENTION:")
            for failure in critical_failures:
                print(f"   ‚ùå {failure}")
        else:
            print(f"\nüéâ NO CRITICAL FAILURES DETECTED")
        
        print(f"\nüìã SECTION 2 BUG FIX STATUS:")
        if failed_tests == 0:
            print("   üéØ ALL SECTION 2 BUG FIXES VERIFIED WORKING")
            print("   ‚úÖ Navigation flow working correctly")
            print("   ‚úÖ Progress tracking functional") 
            print("   ‚úÖ Mathematical validation with sign flipping working")
            print("   ‚úÖ Step progression implemented properly")
            print("   ‚úÖ Practice stage displays correctly")
        else:
            print("   ‚ö†Ô∏è  SOME SECTION 2 BUG FIXES NEED ATTENTION")
            print("   üîß Review failed test categories above")
        
        print("\n" + "=" * 80)

    def run_section2_bug_fix_tests(self):
        """Run comprehensive Section 2 bug fix tests as requested"""
        print("=" * 80)
        print("üß™ SECTION 2 CRITICAL BUG FIXES TESTING")
        print("=" * 80)
        
        # Test categories based on review request
        test_categories = [
            ("Health Check", self.test_health_check, "critical"),
            ("Navigation Flow Testing", self.test_section2_navigation_flow, "critical"),
            ("Progress Tracking Verification", self.test_section2_progress_tracking, "critical"),
            ("Mathematical Validation Testing", self.test_section2_mathematical_validation, "critical"),
            ("Step Progression Testing", self.test_section2_step_progression, "critical"),
            ("Practice Stage Display Testing", self.test_section2_practice_display, "critical")
        ]
        
        results = {}
        critical_failures = []
        
        for category_name, test_method, priority in test_categories:
            print(f"\nüîç TESTING CATEGORY: {category_name} (Priority: {priority.upper()})")
            print("-" * 60)
            
            try:
                success = test_method()
                results[category_name] = success
                
                if not success and priority == "critical":
                    critical_failures.append(category_name)
                    
            except Exception as e:
                print(f"‚ùå CRITICAL ERROR in {category_name}: {str(e)}")
                results[category_name] = False
                critical_failures.append(category_name)
        
        # Generate comprehensive summary
        self.generate_section2_summary(results, critical_failures)
        
        return results

def main():
    """Main function to run Section 2 bug fix tests"""
    print("üöÄ Starting Section 2 Bug Fix Testing...")
    
    tester = Section2BugFixTester(BACKEND_URL)
    results = tester.run_section2_bug_fix_tests()
    
    # Exit with appropriate code
    failed_tests = sum(1 for success in results.values() if not success)
    sys.exit(failed_tests)

if __name__ == "__main__":
    main()